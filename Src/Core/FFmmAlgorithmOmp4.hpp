#ifndef FFMMALGORITHMOMP4_HPP
#define FFMMALGORITHMOMP4_HPP

// @SCALFMM_PRIVATE

#include "../Utils/FGlobal.hpp"
#include "../Utils/FAssert.hpp"
#include "../Utils/FLog.hpp"

#include "../Utils/FTic.hpp"

#include "../Containers/FOctree.hpp"
#include "../Containers/FVector.hpp"
#include "../Utils/FAlgorithmTimers.hpp"

#include "FCoreCommon.hpp"
#include "FP2PExclusion.hpp"

#undef commute_if_supported
#if OPENMP_SUPPORT_COMMUTE
#define commute_if_supported commute
#else
#define commute_if_supported inout
#endif

#undef priority_if_supported
#ifdef OPENMP_SUPPORT_PRIORITY
#define priority_if_supported(x) priority(x)
#else
#define priority_if_supported(x)
#endif


/**
 * @author Berenger Bramas (berenger.bramas@inria.fr)
 * @class FFmmAlgorithmOmp4
 * @brief
 * Please read the license
 *
 * This class is a basic FMM algorithm
 * It just iterates on a tree and call the kernels with good arguments.
 *
 * Of course this class does not deallocate pointer given in arguements.
 */
template<class OctreeClass, class CellClass, class ContainerClass, class KernelClass, class LeafClass, class P2PExclusionClass = FP2PMiddleExclusion>
class FFmmAlgorithmOmp4 : public FAbstractAlgorithm, public FAlgorithmTimers {

    static_assert(sizeof(CellClass) > 1, "CellClass should be greater than one byte to ensure dependency coherency");

    OctreeClass* const tree;       //< The octree to work on
    KernelClass** kernels;    //< The kernels

    const int MaxThreads;

    const int OctreeHeight;

    const int leafLevelSeparationCriteria;

    // Used with OPENMP_SUPPORT_PRIORITY
    size_t p2pPrioCriteria;

public:
    /** The constructor need the octree and the kernels used for computation
     * @param inTree the octree to work on
     * @param inKernels the kernels to call
     * An assert is launched if one of the arguments is null
     */
    FFmmAlgorithmOmp4(OctreeClass* const inTree, KernelClass* const inKernels, const int inLeafLevelSeperationCriteria = 1)
: tree(inTree) , kernels(nullptr),
  MaxThreads(omp_get_max_threads()), OctreeHeight(tree->getHeight()), leafLevelSeparationCriteria(inLeafLevelSeperationCriteria),
      p2pPrioCriteria(0)
{

        FAssertLF(tree, "tree cannot be null");
        FAssertLF(inKernels, "kernels cannot be null");
        FAssertLF(leafLevelSeparationCriteria < 3, "Separation criteria should be < 3");

        this->kernels = new KernelClass*[MaxThreads];
        #pragma omp parallel num_threads(MaxThreads)
        {
            #pragma omp critical (InitFFmmAlgorithmOmp4)
            {
                this->kernels[omp_get_thread_num()] = new KernelClass(*inKernels);
            }
        }

        FAbstractAlgorithm::setNbLevelsInTree(tree->getHeight());

        FLOG(FLog::Controller << "FFmmAlgorithmOmp4 (Max Thread " << omp_get_max_threads() << ")\n");

        FAssertLF(KernelClass::NeedFinishedM2LEvent() == false, "FFmmAlgorithmOmp4 cannot notify for M2L at level ending.");

#ifdef OPENMP_SUPPORT_PRIORITY
        size_t nbLeaves = 0;
        size_t nbParticles = 0;

        typename OctreeClass::Iterator octreeIterator(tree);
        octreeIterator.gotoBottomLeft();
        // for each leafs
        do{
            ContainerClass* taskParticlesTgt = octreeIterator.getCurrentListTargets();
            nbParticles += taskParticlesTgt->getNbParticles();
            nbLeaves    += 1;
        } while(octreeIterator.moveRight());
        p2pPrioCriteria = (nbParticles/nbLeaves);
#endif
}

    /** Default destructor */
    virtual ~FFmmAlgorithmOmp4(){
        for(int idxThread = 0 ; idxThread < MaxThreads ; ++idxThread){
            delete this->kernels[idxThread];
        }
        delete [] this->kernels;
    }

protected:

    const unsigned char* getCellMultipoleDepPtr(const CellClass* taskCell) const {
        return reinterpret_cast<const unsigned char*>(taskCell);
    }

    const unsigned char* getCellLocalDepPtr(const CellClass* taskCell) const {
        return reinterpret_cast<const unsigned char*>(taskCell) + 1;
    }


    /**
     * To execute the fmm algorithm
     * Call this function to run the complete algorithm
     */
    void executeCore(const unsigned operationsToProceed) override {

        #pragma omp parallel
        {
            #pragma omp master
            {
                Timers[NearTimer].tic();
                if( operationsToProceed & FFmmP2P )
                    directPass();
                Timers[NearTimer].tac();

                Timers[P2MTimer].tic();
                if(operationsToProceed & FFmmP2M)
                    bottomPass();
                Timers[P2MTimer].tac();

                Timers[M2MTimer].tic();
                if(operationsToProceed & FFmmM2M)
                    upwardPass();
                Timers[M2MTimer].tac();

                Timers[M2LTimer].tic();
                if(operationsToProceed & FFmmM2L)
                    transferPass();
                Timers[M2LTimer].tac();

                Timers[L2LTimer].tic();
                if(operationsToProceed & FFmmL2L)
                    downardPass();
                Timers[L2LTimer].tac();

                Timers[L2PTimer].tic();
                if( operationsToProceed & FFmmL2P)
                    mergePass();
                Timers[L2PTimer].tac();

                #pragma omp taskwait
            }
        }
    }

    /////////////////////////////////////////////////////////////////////////////
    // P2M
    /////////////////////////////////////////////////////////////////////////////

    /** P2M */
    void bottomPass(){
        FLOG( FLog::Controller.write("\tStart Bottom Pass\n").write(FLog::Flush) );
        FLOG(FTic counterTime);

        typename OctreeClass::Iterator octreeIterator(tree);

        // Iterate on leafs
        octreeIterator.gotoBottomLeft();
        do{
            // We need the current cell that represent the leaf
            // and the list of particles
            CellClass* taskCell = octreeIterator.getCurrentCell();
            const unsigned char* taskCellDep = getCellMultipoleDepPtr(taskCell);
            ContainerClass* taskParticles = octreeIterator.getCurrentListSrc();
            #pragma omp task firstprivate(taskCell, taskCellDep, taskParticles) depend(inout:taskCellDep[0]) depend(in:taskParticles[0]) priority_if_supported(9)
            {
                kernels[omp_get_thread_num()]->P2M( taskCell , taskParticles);
            }
        } while(octreeIterator.moveRight());


        FLOG( FLog::Controller << "\tFinished (@Bottom Pass (P2M) = "  << counterTime.tacAndElapsed() << "s)\n" );
    }

    /////////////////////////////////////////////////////////////////////////////
    // Upward
    /////////////////////////////////////////////////////////////////////////////

    /** M2M */
    void upwardPass(){
        FLOG( FLog::Controller.write("\tStart Upward Pass\n").write(FLog::Flush); );
        FLOG(FTic counterTime);

        // Start from leal level - 1
        typename OctreeClass::Iterator octreeIterator(tree);
        octreeIterator.gotoBottomLeft();
        octreeIterator.moveUp();

        for(int idxLevel = OctreeHeight - 2 ; idxLevel > FAbstractAlgorithm::lowerWorkingLevel-1 ; --idxLevel){
            octreeIterator.moveUp();
        }

        typename OctreeClass::Iterator avoidGotoLeftIterator(octreeIterator);

        // for each levels
        for(int idxLevel = FMath::Min(OctreeHeight - 2, FAbstractAlgorithm::lowerWorkingLevel - 1) ; idxLevel >= FAbstractAlgorithm::upperWorkingLevel ; --idxLevel ){
            FLOG(FTic counterTimeLevel);
            // for each cells
            do{
                // We need the current cell and the child
                // child is an array (of 8 child) that may be null
                CellClass* taskCell = octreeIterator.getCurrentCell();
                CellClass* taskChild[8];
                memcpy(taskChild, octreeIterator.getCurrentChild(), 8*sizeof(CellClass*));

                const unsigned char* taskCellDep = getCellMultipoleDepPtr(taskCell);
                const unsigned char* taskChildMultipole[8] = {nullptr};
                int counterFill = 0;
                for(int idxChild = 0 ; idxChild < 8 ; ++idxChild){
                    if(taskChild[idxChild]){
                        taskChildMultipole[counterFill++] = getCellMultipoleDepPtr(taskChild[idxChild]);
                    }
                }

                switch(counterFill){
                case 1:
                    #pragma omp task firstprivate(taskCell, taskCellDep, taskChild, taskChildMultipole, idxLevel) depend(inout:taskCellDep[0]) depend(in:taskChildMultipole[0][0]) priority_if_supported(8)
                    {
                        kernels[omp_get_thread_num()]->M2M( taskCell , taskChild, idxLevel);
                    }
                    break;
                case 2:
                    #pragma omp task firstprivate(taskCell, taskCellDep, taskChild, taskChildMultipole, idxLevel) depend(inout:taskCellDep[0]) depend(in:taskChildMultipole[0][0],taskChildMultipole[1][0]) priority_if_supported(8)
                    {
                        kernels[omp_get_thread_num()]->M2M( taskCell , taskChild, idxLevel);
                    }
                    break;
                case 3:
                    #pragma omp task firstprivate(taskCell, taskCellDep, taskChild, taskChildMultipole, idxLevel) depend(inout:taskCellDep[0]) depend(in:taskChildMultipole[0][0],taskChildMultipole[1][0],taskChildMultipole[2][0]) priority_if_supported(8)
                    {
                        kernels[omp_get_thread_num()]->M2M( taskCell , taskChild, idxLevel);
                    }
                    break;
                case 4:
                    #pragma omp task firstprivate(taskCell, taskCellDep, taskChild, taskChildMultipole, idxLevel) depend(inout:taskCellDep[0]) depend(in:taskChildMultipole[0][0],taskChildMultipole[1][0],taskChildMultipole[2][0],taskChildMultipole[3][0]) priority_if_supported(8)
                    {
                        kernels[omp_get_thread_num()]->M2M( taskCell , taskChild, idxLevel);
                    }
                    break;
                case 5:
                    #pragma omp task firstprivate(taskCell, taskCellDep, taskChild, taskChildMultipole, idxLevel) depend(inout:taskCellDep[0]) depend(in:taskChildMultipole[0][0],taskChildMultipole[1][0],taskChildMultipole[2][0],taskChildMultipole[3][0],taskChildMultipole[4][0]) priority_if_supported(8)
                    {
                        kernels[omp_get_thread_num()]->M2M( taskCell , taskChild, idxLevel);
                    }
                    break;
                case 6:
                    #pragma omp task firstprivate(taskCell, taskCellDep, taskChild, taskChildMultipole, idxLevel) depend(inout:taskCellDep[0]) depend(in:taskChildMultipole[0][0],taskChildMultipole[1][0],taskChildMultipole[2][0],taskChildMultipole[3][0],taskChildMultipole[4][0],taskChildMultipole[5][0]) priority_if_supported(8)
                    {
                        kernels[omp_get_thread_num()]->M2M( taskCell , taskChild, idxLevel);
                    }
                    break;
                case 7:
                    #pragma omp task firstprivate(taskCell, taskCellDep, taskChild, taskChildMultipole, idxLevel) depend(inout:taskCellDep[0]) depend(in:taskChildMultipole[0][0],taskChildMultipole[1][0],taskChildMultipole[2][0],taskChildMultipole[3][0],taskChildMultipole[4][0],taskChildMultipole[5][0],taskChildMultipole[6][0]) priority_if_supported(8)
                    {
                        kernels[omp_get_thread_num()]->M2M( taskCell , taskChild, idxLevel);
                    }
                    break;
                case 8:
                    #pragma omp task firstprivate(taskCell, taskCellDep, taskChild, taskChildMultipole, idxLevel) depend(inout:taskCellDep[0]) depend(in:taskChildMultipole[0][0],taskChildMultipole[1][0],taskChildMultipole[2][0],taskChildMultipole[3][0],taskChildMultipole[4][0],taskChildMultipole[5][0],taskChildMultipole[6][0],taskChildMultipole[7][0]) priority_if_supported(8)
                    {
                        kernels[omp_get_thread_num()]->M2M( taskCell , taskChild, idxLevel);
                    }
                    break;
                default:
                    FAssertLF(0, "Thus must not be possible");
                }
            } while(octreeIterator.moveRight());

            avoidGotoLeftIterator.moveUp();
            octreeIterator = avoidGotoLeftIterator;// equal octreeIterator.moveUp(); octreeIterator.gotoLeft();

            FLOG( FLog::Controller << "\t\t>> Level " << idxLevel << " = "  << counterTimeLevel.tacAndElapsed() << "s\n" );
        }


        FLOG( FLog::Controller << "\tFinished (@Upward Pass (M2M) = "  << counterTime.tacAndElapsed() << "s)\n" );
    }

    /////////////////////////////////////////////////////////////////////////////
    // Transfer
    /////////////////////////////////////////////////////////////////////////////

    /** M2L  */
    void transferPass(){
      #ifdef SCALFMM_USE_EZTRACE

      eztrace_start();
#endif
        this->transferPassWithOutFinalize() ;
#ifdef SCALFMM_USE_EZTRACE
      eztrace_stop();
#endif
        }

    void transferPassWithOutFinalize(){
        FLOG( FLog::Controller.write("\tStart Downward Pass (M2L)\n").write(FLog::Flush); );
        FLOG(FTic counterTime);

        typename OctreeClass::Iterator octreeIterator(tree);
        // Goto the right level
        octreeIterator.moveDown();
        for(int idxLevel = 2 ; idxLevel < FAbstractAlgorithm::upperWorkingLevel ; ++idxLevel){
            octreeIterator.moveDown();
        }
        ////////////////////////////////////////////////////////////////
        typename OctreeClass::Iterator avoidGotoLeftIterator(octreeIterator);
        //
        // for each levels
        for(int idxLevel = FAbstractAlgorithm::upperWorkingLevel ; idxLevel < FAbstractAlgorithm::lowerWorkingLevel ; ++idxLevel ){
            FLOG(FTic counterTimeLevel);
            const int separationCriteria = (idxLevel != FAbstractAlgorithm::lowerWorkingLevel-1 ? 1 : leafLevelSeparationCriteria);
            // for each cell we apply the M2L with all cells in the implicit interaction list
            do{
                const CellClass* taskNeigh[343];
                const int counter = tree->getInteractionNeighbors(taskNeigh, octreeIterator.getCurrentGlobalCoordinate(), idxLevel, separationCriteria);
                if(counter){
                    CellClass* taskCell = octreeIterator.getCurrentCell();
                    const unsigned char* taskCellLocal = getCellLocalDepPtr(taskCell);

                    const unsigned char* taskNeighDeps[189] = {nullptr};
                    int counterFill = 0;
                    for(int idxNeigh = 0 ; idxNeigh < 343 ; ++idxNeigh){
                        if(taskNeigh[idxNeigh]){
                            FAssertLF(counterFill < 189);
                            taskNeighDeps[counterFill++] = getCellMultipoleDepPtr(taskNeigh[idxNeigh]);
                        }
                    }

                    switch(counterFill){
                    case 1:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 2:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 3:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 4:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 5:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 6:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 7:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 8:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 9:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 10:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 11:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 12:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 13:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 14:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 15:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 16:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 17:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 18:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 19:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 20:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 21:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 22:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 23:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 24:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 25:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 26:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 27:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 28:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 29:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 30:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 31:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 32:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 33:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 34:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 35:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 36:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 37:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 38:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 39:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 40:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 41:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 42:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 43:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 44:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 45:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 46:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 47:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 48:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 49:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 50:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 51:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 52:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 53:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 54:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 55:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 56:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 57:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 58:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 59:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 60:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 61:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 62:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 63:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 64:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 65:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 66:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 67:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 68:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 69:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 70:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 71:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 72:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 73:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 74:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 75:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 76:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 77:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 78:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 79:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 80:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 81:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 82:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 83:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 84:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 85:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 86:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 87:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 88:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 89:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 90:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 91:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 92:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 93:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 94:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 95:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 96:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 97:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 98:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 99:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 100:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 101:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 102:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 103:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 104:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 105:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 106:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 107:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 108:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 109:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 110:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 111:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 112:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 113:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 114:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 115:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 116:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 117:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 118:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 119:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 120:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 121:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 122:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 123:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 124:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 125:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 126:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 127:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 128:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 129:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 130:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 131:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 132:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 133:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 134:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 135:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 136:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 137:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 138:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 139:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 140:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 141:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 142:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 143:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 144:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 145:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 146:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 147:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 148:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 149:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 150:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 151:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 152:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 153:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 154:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 155:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 156:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 157:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 158:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 159:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 160:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 161:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 162:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 163:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 164:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 165:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 166:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 167:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 168:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 169:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0],taskNeighDeps[168][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 170:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0],taskNeighDeps[168][0],taskNeighDeps[169][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 171:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0],taskNeighDeps[168][0],taskNeighDeps[169][0],taskNeighDeps[170][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 172:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0],taskNeighDeps[168][0],taskNeighDeps[169][0],taskNeighDeps[170][0],taskNeighDeps[171][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 173:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0],taskNeighDeps[168][0],taskNeighDeps[169][0],taskNeighDeps[170][0],taskNeighDeps[171][0],taskNeighDeps[172][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 174:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0],taskNeighDeps[168][0],taskNeighDeps[169][0],taskNeighDeps[170][0],taskNeighDeps[171][0],taskNeighDeps[172][0],taskNeighDeps[173][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 175:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0],taskNeighDeps[168][0],taskNeighDeps[169][0],taskNeighDeps[170][0],taskNeighDeps[171][0],taskNeighDeps[172][0],taskNeighDeps[173][0],taskNeighDeps[174][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 176:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0],taskNeighDeps[168][0],taskNeighDeps[169][0],taskNeighDeps[170][0],taskNeighDeps[171][0],taskNeighDeps[172][0],taskNeighDeps[173][0],taskNeighDeps[174][0],taskNeighDeps[175][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 177:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0],taskNeighDeps[168][0],taskNeighDeps[169][0],taskNeighDeps[170][0],taskNeighDeps[171][0],taskNeighDeps[172][0],taskNeighDeps[173][0],taskNeighDeps[174][0],taskNeighDeps[175][0],taskNeighDeps[176][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 178:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0],taskNeighDeps[168][0],taskNeighDeps[169][0],taskNeighDeps[170][0],taskNeighDeps[171][0],taskNeighDeps[172][0],taskNeighDeps[173][0],taskNeighDeps[174][0],taskNeighDeps[175][0],taskNeighDeps[176][0],taskNeighDeps[177][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 179:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0],taskNeighDeps[168][0],taskNeighDeps[169][0],taskNeighDeps[170][0],taskNeighDeps[171][0],taskNeighDeps[172][0],taskNeighDeps[173][0],taskNeighDeps[174][0],taskNeighDeps[175][0],taskNeighDeps[176][0],taskNeighDeps[177][0],taskNeighDeps[178][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 180:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0],taskNeighDeps[168][0],taskNeighDeps[169][0],taskNeighDeps[170][0],taskNeighDeps[171][0],taskNeighDeps[172][0],taskNeighDeps[173][0],taskNeighDeps[174][0],taskNeighDeps[175][0],taskNeighDeps[176][0],taskNeighDeps[177][0],taskNeighDeps[178][0],taskNeighDeps[179][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 181:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0],taskNeighDeps[168][0],taskNeighDeps[169][0],taskNeighDeps[170][0],taskNeighDeps[171][0],taskNeighDeps[172][0],taskNeighDeps[173][0],taskNeighDeps[174][0],taskNeighDeps[175][0],taskNeighDeps[176][0],taskNeighDeps[177][0],taskNeighDeps[178][0],taskNeighDeps[179][0],taskNeighDeps[180][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 182:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0],taskNeighDeps[168][0],taskNeighDeps[169][0],taskNeighDeps[170][0],taskNeighDeps[171][0],taskNeighDeps[172][0],taskNeighDeps[173][0],taskNeighDeps[174][0],taskNeighDeps[175][0],taskNeighDeps[176][0],taskNeighDeps[177][0],taskNeighDeps[178][0],taskNeighDeps[179][0],taskNeighDeps[180][0],taskNeighDeps[181][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 183:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0],taskNeighDeps[168][0],taskNeighDeps[169][0],taskNeighDeps[170][0],taskNeighDeps[171][0],taskNeighDeps[172][0],taskNeighDeps[173][0],taskNeighDeps[174][0],taskNeighDeps[175][0],taskNeighDeps[176][0],taskNeighDeps[177][0],taskNeighDeps[178][0],taskNeighDeps[179][0],taskNeighDeps[180][0],taskNeighDeps[181][0],taskNeighDeps[182][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 184:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0],taskNeighDeps[168][0],taskNeighDeps[169][0],taskNeighDeps[170][0],taskNeighDeps[171][0],taskNeighDeps[172][0],taskNeighDeps[173][0],taskNeighDeps[174][0],taskNeighDeps[175][0],taskNeighDeps[176][0],taskNeighDeps[177][0],taskNeighDeps[178][0],taskNeighDeps[179][0],taskNeighDeps[180][0],taskNeighDeps[181][0],taskNeighDeps[182][0],taskNeighDeps[183][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 185:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0],taskNeighDeps[168][0],taskNeighDeps[169][0],taskNeighDeps[170][0],taskNeighDeps[171][0],taskNeighDeps[172][0],taskNeighDeps[173][0],taskNeighDeps[174][0],taskNeighDeps[175][0],taskNeighDeps[176][0],taskNeighDeps[177][0],taskNeighDeps[178][0],taskNeighDeps[179][0],taskNeighDeps[180][0],taskNeighDeps[181][0],taskNeighDeps[182][0],taskNeighDeps[183][0],taskNeighDeps[184][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 186:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0],taskNeighDeps[168][0],taskNeighDeps[169][0],taskNeighDeps[170][0],taskNeighDeps[171][0],taskNeighDeps[172][0],taskNeighDeps[173][0],taskNeighDeps[174][0],taskNeighDeps[175][0],taskNeighDeps[176][0],taskNeighDeps[177][0],taskNeighDeps[178][0],taskNeighDeps[179][0],taskNeighDeps[180][0],taskNeighDeps[181][0],taskNeighDeps[182][0],taskNeighDeps[183][0],taskNeighDeps[184][0],taskNeighDeps[185][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 187:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0],taskNeighDeps[168][0],taskNeighDeps[169][0],taskNeighDeps[170][0],taskNeighDeps[171][0],taskNeighDeps[172][0],taskNeighDeps[173][0],taskNeighDeps[174][0],taskNeighDeps[175][0],taskNeighDeps[176][0],taskNeighDeps[177][0],taskNeighDeps[178][0],taskNeighDeps[179][0],taskNeighDeps[180][0],taskNeighDeps[181][0],taskNeighDeps[182][0],taskNeighDeps[183][0],taskNeighDeps[184][0],taskNeighDeps[185][0],taskNeighDeps[186][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 188:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0],taskNeighDeps[168][0],taskNeighDeps[169][0],taskNeighDeps[170][0],taskNeighDeps[171][0],taskNeighDeps[172][0],taskNeighDeps[173][0],taskNeighDeps[174][0],taskNeighDeps[175][0],taskNeighDeps[176][0],taskNeighDeps[177][0],taskNeighDeps[178][0],taskNeighDeps[179][0],taskNeighDeps[180][0],taskNeighDeps[181][0],taskNeighDeps[182][0],taskNeighDeps[183][0],taskNeighDeps[184][0],taskNeighDeps[185][0],taskNeighDeps[186][0],taskNeighDeps[187][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    case 189:
                    #pragma omp task firstprivate(taskCell,taskCellLocal, taskNeigh, taskNeighDeps, idxLevel, counter) depend(commute_if_supported:taskCellLocal[0]) depend(in:taskNeighDeps[0][0],taskNeighDeps[1][0],taskNeighDeps[2][0],taskNeighDeps[3][0],taskNeighDeps[4][0],taskNeighDeps[5][0],taskNeighDeps[6][0],taskNeighDeps[7][0],taskNeighDeps[8][0],taskNeighDeps[9][0],taskNeighDeps[10][0],taskNeighDeps[11][0],taskNeighDeps[12][0],taskNeighDeps[13][0],taskNeighDeps[14][0],taskNeighDeps[15][0],taskNeighDeps[16][0],taskNeighDeps[17][0],taskNeighDeps[18][0],taskNeighDeps[19][0],taskNeighDeps[20][0],taskNeighDeps[21][0],taskNeighDeps[22][0],taskNeighDeps[23][0],taskNeighDeps[24][0],taskNeighDeps[25][0],taskNeighDeps[26][0],taskNeighDeps[27][0],taskNeighDeps[28][0],taskNeighDeps[29][0],taskNeighDeps[30][0],taskNeighDeps[31][0],taskNeighDeps[32][0],taskNeighDeps[33][0],taskNeighDeps[34][0],taskNeighDeps[35][0],taskNeighDeps[36][0],taskNeighDeps[37][0],taskNeighDeps[38][0],taskNeighDeps[39][0],taskNeighDeps[40][0],taskNeighDeps[41][0],taskNeighDeps[42][0],taskNeighDeps[43][0],taskNeighDeps[44][0],taskNeighDeps[45][0],taskNeighDeps[46][0],taskNeighDeps[47][0],taskNeighDeps[48][0],taskNeighDeps[49][0],taskNeighDeps[50][0],taskNeighDeps[51][0],taskNeighDeps[52][0],taskNeighDeps[53][0],taskNeighDeps[54][0],taskNeighDeps[55][0],taskNeighDeps[56][0],taskNeighDeps[57][0],taskNeighDeps[58][0],taskNeighDeps[59][0],taskNeighDeps[60][0],taskNeighDeps[61][0],taskNeighDeps[62][0],taskNeighDeps[63][0],taskNeighDeps[64][0],taskNeighDeps[65][0],taskNeighDeps[66][0],taskNeighDeps[67][0],taskNeighDeps[68][0],taskNeighDeps[69][0],taskNeighDeps[70][0],taskNeighDeps[71][0],taskNeighDeps[72][0],taskNeighDeps[73][0],taskNeighDeps[74][0],taskNeighDeps[75][0],taskNeighDeps[76][0],taskNeighDeps[77][0],taskNeighDeps[78][0],taskNeighDeps[79][0],taskNeighDeps[80][0],taskNeighDeps[81][0],taskNeighDeps[82][0],taskNeighDeps[83][0],taskNeighDeps[84][0],taskNeighDeps[85][0],taskNeighDeps[86][0],taskNeighDeps[87][0],taskNeighDeps[88][0],taskNeighDeps[89][0],taskNeighDeps[90][0],taskNeighDeps[91][0],taskNeighDeps[92][0],taskNeighDeps[93][0],taskNeighDeps[94][0],taskNeighDeps[95][0],taskNeighDeps[96][0],taskNeighDeps[97][0],taskNeighDeps[98][0],taskNeighDeps[99][0],taskNeighDeps[100][0],taskNeighDeps[101][0],taskNeighDeps[102][0],taskNeighDeps[103][0],taskNeighDeps[104][0],taskNeighDeps[105][0],taskNeighDeps[106][0],taskNeighDeps[107][0],taskNeighDeps[108][0],taskNeighDeps[109][0],taskNeighDeps[110][0],taskNeighDeps[111][0],taskNeighDeps[112][0],taskNeighDeps[113][0],taskNeighDeps[114][0],taskNeighDeps[115][0],taskNeighDeps[116][0],taskNeighDeps[117][0],taskNeighDeps[118][0],taskNeighDeps[119][0],taskNeighDeps[120][0],taskNeighDeps[121][0],taskNeighDeps[122][0],taskNeighDeps[123][0],taskNeighDeps[124][0],taskNeighDeps[125][0],taskNeighDeps[126][0],taskNeighDeps[127][0],taskNeighDeps[128][0],taskNeighDeps[129][0],taskNeighDeps[130][0],taskNeighDeps[131][0],taskNeighDeps[132][0],taskNeighDeps[133][0],taskNeighDeps[134][0],taskNeighDeps[135][0],taskNeighDeps[136][0],taskNeighDeps[137][0],taskNeighDeps[138][0],taskNeighDeps[139][0],taskNeighDeps[140][0],taskNeighDeps[141][0],taskNeighDeps[142][0],taskNeighDeps[143][0],taskNeighDeps[144][0],taskNeighDeps[145][0],taskNeighDeps[146][0],taskNeighDeps[147][0],taskNeighDeps[148][0],taskNeighDeps[149][0],taskNeighDeps[150][0],taskNeighDeps[151][0],taskNeighDeps[152][0],taskNeighDeps[153][0],taskNeighDeps[154][0],taskNeighDeps[155][0],taskNeighDeps[156][0],taskNeighDeps[157][0],taskNeighDeps[158][0],taskNeighDeps[159][0],taskNeighDeps[160][0],taskNeighDeps[161][0],taskNeighDeps[162][0],taskNeighDeps[163][0],taskNeighDeps[164][0],taskNeighDeps[165][0],taskNeighDeps[166][0],taskNeighDeps[167][0],taskNeighDeps[168][0],taskNeighDeps[169][0],taskNeighDeps[170][0],taskNeighDeps[171][0],taskNeighDeps[172][0],taskNeighDeps[173][0],taskNeighDeps[174][0],taskNeighDeps[175][0],taskNeighDeps[176][0],taskNeighDeps[177][0],taskNeighDeps[178][0],taskNeighDeps[179][0],taskNeighDeps[180][0],taskNeighDeps[181][0],taskNeighDeps[182][0],taskNeighDeps[183][0],taskNeighDeps[184][0],taskNeighDeps[185][0],taskNeighDeps[186][0],taskNeighDeps[187][0],taskNeighDeps[188][0]) priority_if_supported(idxLevel==FAbstractAlgorithm::lowerWorkingLevel-1?3:6)
                    {
                        kernels[omp_get_thread_num()]->M2L(  taskCell, taskNeigh, counter, idxLevel);
                    }
                    break;
                    default:
                        FAssertLF(0, "This must be impossible");
                    }
                }
            } while(octreeIterator.moveRight());
            ////////////////////////////////////////////////////////////////
            // move up  and goto left
            avoidGotoLeftIterator.moveDown();
            octreeIterator = avoidGotoLeftIterator;

            FLOG( FLog::Controller << "\t\t>> Level " << idxLevel << " = "  << counterTimeLevel.tacAndElapsed() << "s\n" );
        }

        FLOG( FLog::Controller << "\tFinished (@Downward Pass (M2L) = "  << counterTime.tacAndElapsed() << "s)\n" );

    }

    /////////////////////////////////////////////////////////////////////////////
    // Downward
    /////////////////////////////////////////////////////////////////////////////

    void downardPass(){ // second L2L
        FLOG( FLog::Controller.write("\tStart Downward Pass (L2L)\n").write(FLog::Flush); );
        FLOG(FTic counterTime);

        typename OctreeClass::Iterator octreeIterator(tree);
        octreeIterator.moveDown();

        for(int idxLevel = 2 ; idxLevel < FAbstractAlgorithm::upperWorkingLevel ; ++idxLevel){
            octreeIterator.moveDown();
        }

        typename OctreeClass::Iterator avoidGotoLeftIterator(octreeIterator);

        const int heightMinusOne = FAbstractAlgorithm::lowerWorkingLevel - 1;
        // for each levels exepted leaf level
        for(int idxLevel = FAbstractAlgorithm::upperWorkingLevel ; idxLevel < heightMinusOne ; ++idxLevel ){
            FLOG(FTic counterTimeLevel);
            // for each cells
            do{
                CellClass* taskCell = octreeIterator.getCurrentCell();
                CellClass* taskChild[8];
                memcpy(taskChild, octreeIterator.getCurrentChild(), 8*sizeof(CellClass*));

                const unsigned char* taskCellLocal = getCellLocalDepPtr(taskCell);
                const unsigned char* taskChildLocal[8] = {nullptr};
                int counterFill = 0;
                for(int idxChild = 0 ; idxChild < 8 ; ++idxChild){
                    if(taskChild[idxChild]){
                        taskChildLocal[counterFill++] = getCellLocalDepPtr(taskChild[idxChild]);
                    }
                }


                switch(counterFill){
                case 1:
                    #pragma omp task firstprivate(taskCell, taskCellLocal, taskChild, taskChildLocal, idxLevel) depend(in:taskCellLocal[0]) depend(commute_if_supported:taskChildLocal[0][0]) priority_if_supported(7)
                    {
                    kernels[omp_get_thread_num()]->L2L( taskCell , taskChild, idxLevel);
                    }
                    break;
                case 2:
                    #pragma omp task firstprivate(taskCell, taskCellLocal, taskChild, taskChildLocal, idxLevel) depend(in:taskCellLocal[0]) depend(commute_if_supported:taskChildLocal[0][0],taskChildLocal[1][0]) priority_if_supported(7)
                    {
                    kernels[omp_get_thread_num()]->L2L( taskCell , taskChild, idxLevel);
                    }
                    break;
                case 3:
                    #pragma omp task firstprivate(taskCell, taskCellLocal, taskChild, taskChildLocal, idxLevel) depend(in:taskCellLocal[0]) depend(commute_if_supported:taskChildLocal[0][0],taskChildLocal[1][0],taskChildLocal[2][0]) priority_if_supported(7)
                    {
                    kernels[omp_get_thread_num()]->L2L( taskCell , taskChild, idxLevel);
                    }
                    break;
                case 4:
                    #pragma omp task firstprivate(taskCell, taskCellLocal, taskChild, taskChildLocal, idxLevel) depend(in:taskCellLocal[0]) depend(commute_if_supported:taskChildLocal[0][0],taskChildLocal[1][0],taskChildLocal[2][0],taskChildLocal[3][0]) priority_if_supported(7)
                    {
                    kernels[omp_get_thread_num()]->L2L( taskCell , taskChild, idxLevel);
                    }
                    break;
                case 5:
                    #pragma omp task firstprivate(taskCell, taskCellLocal, taskChild, taskChildLocal, idxLevel) depend(in:taskCellLocal[0]) depend(commute_if_supported:taskChildLocal[0][0],taskChildLocal[1][0],taskChildLocal[2][0],taskChildLocal[3][0],taskChildLocal[4][0]) priority_if_supported(7)
                    {
                    kernels[omp_get_thread_num()]->L2L( taskCell , taskChild, idxLevel);
                    }
                    break;
                case 6:
                    #pragma omp task firstprivate(taskCell, taskCellLocal, taskChild, taskChildLocal, idxLevel) depend(in:taskCellLocal[0]) depend(commute_if_supported:taskChildLocal[0][0],taskChildLocal[1][0],taskChildLocal[2][0],taskChildLocal[3][0],taskChildLocal[4][0],taskChildLocal[5][0]) priority_if_supported(7)
                    {
                    kernels[omp_get_thread_num()]->L2L( taskCell , taskChild, idxLevel);
                    }
                    break;
                case 7:
                    #pragma omp task firstprivate(taskCell, taskCellLocal, taskChild, taskChildLocal, idxLevel) depend(in:taskCellLocal[0]) depend(commute_if_supported:taskChildLocal[0][0],taskChildLocal[1][0],taskChildLocal[2][0],taskChildLocal[3][0],taskChildLocal[4][0],taskChildLocal[5][0],taskChildLocal[6][0]) priority_if_supported(7)
                    {
                    kernels[omp_get_thread_num()]->L2L( taskCell , taskChild, idxLevel);
                    }
                    break;
                case 8:
                    #pragma omp task firstprivate(taskCell, taskCellLocal, taskChild, taskChildLocal, idxLevel) depend(in:taskCellLocal[0]) depend(commute_if_supported:taskChildLocal[0][0],taskChildLocal[1][0],taskChildLocal[2][0],taskChildLocal[3][0],taskChildLocal[4][0],taskChildLocal[5][0],taskChildLocal[6][0],taskChildLocal[7][0]) priority_if_supported(7)
                    {
                    kernels[omp_get_thread_num()]->L2L( taskCell , taskChild, idxLevel);
                    }
                    break;
                default:
                    FAssertLF(0, "Thus must not be possible");
                }
            } while(octreeIterator.moveRight());

            avoidGotoLeftIterator.moveDown();
            octreeIterator = avoidGotoLeftIterator;

            FLOG( FLog::Controller << "\t\t>> Level " << idxLevel << " = "  << counterTimeLevel.tacAndElapsed() << "s\n" );
        }

        FLOG( FLog::Controller << "\tFinished (@Downward Pass (L2L) = "  << counterTime.tacAndElapsed() << "s)\n" );
    }


    /////////////////////////////////////////////////////////////////////////////
    // Direct
    /////////////////////////////////////////////////////////////////////////////

    /** P2P */
    void directPass(){
        FLOG( FLog::Controller.write("\tStart Direct Pass\n").write(FLog::Flush); );
        FLOG(FTic counterTime);
        const int heightMinusOne = OctreeHeight - 1;

        typename OctreeClass::Iterator octreeIterator(tree);
        octreeIterator.gotoBottomLeft();

        // for each leafs
        do{
            // There is a maximum of 26 neighbors
            ContainerClass* neighbors[27];
            const int counter = tree->getLeafsNeighbors(neighbors, octreeIterator.getCurrentGlobalCoordinate(),heightMinusOne);

            ContainerClass* taskParticlesTgt = octreeIterator.getCurrentListTargets();
            ContainerClass* taskParticlesSrc = octreeIterator.getCurrentListSrc();
            const FTreeCoordinate coord = octreeIterator.getCurrentGlobalCoordinate();

            ContainerClass* neighborsDeps[27];
            int counterFill = 0;
            for(int idxNeigh = 0 ; idxNeigh < 27 ; ++idxNeigh){
                if(neighbors[idxNeigh]){
                     neighborsDeps[counterFill++] = neighbors[idxNeigh];
                }
            }

            switch(counterFill){
            case 0:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
                break;
            case 1:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 2:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 3:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 4:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 5:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 6:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 7:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 8:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 9:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 10:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 11:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 12:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 13:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 14:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 15:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 16:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 17:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 18:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0],neighborsDeps[17][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0],neighborsDeps[17][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 19:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0],neighborsDeps[17][0],neighborsDeps[18][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0],neighborsDeps[17][0],neighborsDeps[18][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 20:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0],neighborsDeps[17][0],neighborsDeps[18][0],neighborsDeps[19][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0],neighborsDeps[17][0],neighborsDeps[18][0],neighborsDeps[19][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 21:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0],neighborsDeps[17][0],neighborsDeps[18][0],neighborsDeps[19][0],neighborsDeps[20][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0],neighborsDeps[17][0],neighborsDeps[18][0],neighborsDeps[19][0],neighborsDeps[20][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 22:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0],neighborsDeps[17][0],neighborsDeps[18][0],neighborsDeps[19][0],neighborsDeps[20][0],neighborsDeps[21][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0],neighborsDeps[17][0],neighborsDeps[18][0],neighborsDeps[19][0],neighborsDeps[20][0],neighborsDeps[21][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 23:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0],neighborsDeps[17][0],neighborsDeps[18][0],neighborsDeps[19][0],neighborsDeps[20][0],neighborsDeps[21][0],neighborsDeps[22][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0],neighborsDeps[17][0],neighborsDeps[18][0],neighborsDeps[19][0],neighborsDeps[20][0],neighborsDeps[21][0],neighborsDeps[22][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 24:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0],neighborsDeps[17][0],neighborsDeps[18][0],neighborsDeps[19][0],neighborsDeps[20][0],neighborsDeps[21][0],neighborsDeps[22][0],neighborsDeps[23][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0],neighborsDeps[17][0],neighborsDeps[18][0],neighborsDeps[19][0],neighborsDeps[20][0],neighborsDeps[21][0],neighborsDeps[22][0],neighborsDeps[23][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 25:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0],neighborsDeps[17][0],neighborsDeps[18][0],neighborsDeps[19][0],neighborsDeps[20][0],neighborsDeps[21][0],neighborsDeps[22][0],neighborsDeps[23][0],neighborsDeps[24][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0],neighborsDeps[17][0],neighborsDeps[18][0],neighborsDeps[19][0],neighborsDeps[20][0],neighborsDeps[21][0],neighborsDeps[22][0],neighborsDeps[23][0],neighborsDeps[24][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 26:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0],neighborsDeps[17][0],neighborsDeps[18][0],neighborsDeps[19][0],neighborsDeps[20][0],neighborsDeps[21][0],neighborsDeps[22][0],neighborsDeps[23][0],neighborsDeps[24][0],neighborsDeps[25][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0],neighborsDeps[17][0],neighborsDeps[18][0],neighborsDeps[19][0],neighborsDeps[20][0],neighborsDeps[21][0],neighborsDeps[22][0],neighborsDeps[23][0],neighborsDeps[24][0],neighborsDeps[25][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            case 27:
            if(taskParticlesTgt == taskParticlesSrc){
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, coord) depend(commute_if_supported:taskParticlesTgt[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0],neighborsDeps[17][0],neighborsDeps[18][0],neighborsDeps[19][0],neighborsDeps[20][0],neighborsDeps[21][0],neighborsDeps[22][0],neighborsDeps[23][0],neighborsDeps[24][0],neighborsDeps[25][0],neighborsDeps[26][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesTgt, neighbors, counter);
                }
            }
            else{
                #pragma omp task firstprivate(neighbors, neighborsDeps, counter, taskParticlesTgt, taskParticlesSrc, coord) depend(commute_if_supported:taskParticlesTgt[0]) depend(in:taskParticlesSrc[0],neighborsDeps[0][0],neighborsDeps[1][0],neighborsDeps[2][0],neighborsDeps[3][0],neighborsDeps[4][0],neighborsDeps[5][0],neighborsDeps[6][0],neighborsDeps[7][0],neighborsDeps[8][0],neighborsDeps[9][0],neighborsDeps[10][0],neighborsDeps[11][0],neighborsDeps[12][0],neighborsDeps[13][0],neighborsDeps[14][0],neighborsDeps[15][0],neighborsDeps[16][0],neighborsDeps[17][0],neighborsDeps[18][0],neighborsDeps[19][0],neighborsDeps[20][0],neighborsDeps[21][0],neighborsDeps[22][0],neighborsDeps[23][0],neighborsDeps[24][0],neighborsDeps[25][0],neighborsDeps[26][0]) priority_if_supported((taskParticlesTgt->getNbParticles())>size_t(p2pPrioCriteria*1.1)?7:1)
                {
                    kernels[omp_get_thread_num()]->P2P(coord, taskParticlesTgt,
                            taskParticlesSrc, neighbors, counter);
                }
            }
            break;
            default:
                FAssertLF(0, "This must be impossible");
        }
        } while(octreeIterator.moveRight());

        FLOG( FLog::Controller << "\tFinished (@Direct Pass (P2P) = "  << counterTime.tacAndElapsed() << "s)\n" );
    }

    /** L2P */
    void mergePass(){
        FLOG( FLog::Controller.write("\tStart Direct Pass\n").write(FLog::Flush); );
        FLOG(FTic counterTime);

        typename OctreeClass::Iterator octreeIterator(tree);
        octreeIterator.gotoBottomLeft();

        // for each leafs
        do{
            CellClass* taskCell = octreeIterator.getCurrentCell();
            const unsigned char* taskCellLocal = getCellLocalDepPtr(taskCell);
            ContainerClass* taskParticles = octreeIterator.getCurrentListTargets();
            #pragma omp task firstprivate(taskCell,taskCellLocal, taskParticles) depend(in:taskCellLocal[0]) depend(commute_if_supported:taskParticles[0]) priority_if_supported(1)
            {
                kernels[omp_get_thread_num()]->L2P(taskCell, taskParticles);
            }
        } while(octreeIterator.moveRight());


        FLOG( FLog::Controller << "\tFinished (@Merge Pass (L2P) = "  << counterTime.tacAndElapsed() << "s)\n" );
    }

};


#endif // FFMMALGORITHMOMP4_HPP

